import streamlit as st
import sqlite3
import hashlib
import pandas as pd
from datetime import datetime

# --- Database Setup & Functions (‡§™‡§π‡§≤‡•á ‡§ú‡•à‡§∏‡§æ) ---
conn = sqlite3.connect('userdata.db', check_same_thread=False)
c = conn.cursor()
def create_usertable(): c.execute('CREATE TABLE IF NOT EXISTS userstable(username TEXT, password TEXT)')
def create_history_table(): c.execute('CREATE TABLE IF NOT EXISTS historytable(username TEXT, search_date TEXT, disease TEXT, prediction REAL)')
def add_userdata(username, password): c.execute('INSERT INTO userstable(username, password) VALUES (?,?)', (username, password)); conn.commit()
def add_history_data(username, disease, prediction): now = datetime.now().strftime("%Y-%m-%d %H:%M:%S"); c.execute('INSERT INTO historytable(username, search_date, disease, prediction) VALUES (?,?,?,?)', (username, now, disease, prediction)); conn.commit()
def view_user_history(username): c.execute('SELECT search_date, disease, prediction FROM historytable WHERE username = ? ORDER BY search_date DESC', (username,)); return c.fetchall()
def get_user_password_hash(username): c.execute('SELECT password FROM userstable WHERE username =?', (username,)); return c.fetchone()
def make_hashes(password): return hashlib.sha256(str.encode(password)).hexdigest()
def check_hashes(password, hashed_text): return make_hashes(password) == hashed_text

# --- Data Loading (‡§™‡§π‡§≤‡•á ‡§ú‡•à‡§∏‡§æ) ---
@st.cache_data
def load_data(filepath):
    try: return pd.read_csv(filepath)
    except FileNotFoundError: st.error(f"Error: '{filepath}' not found."); return None

# --- Chatbot Logic (‡§™‡§π‡§≤‡•á ‡§ú‡•à‡§∏‡§æ) ---
def get_bot_response(user_input):
    query = user_input.lower().strip()
    if any(word in query for word in ["‡§®‡§Æ‡§∏‡•ç‡§§‡•á", "‡§π‡•á‡§≤‡•ã", "‡§π‡§æ‡§Ø"]): return "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?"
    elif any(word in query for word in ["‡§ï‡•à‡§∏‡•á", "‡§ï‡§æ‡§Æ", "‡§ê‡§™"]): return "‡§Æ‡•à‡§Ç CheckupTime ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ñ‡•ã‡§ú ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§µ‡§æ‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ ‡§¨‡§§‡§æ‡§ä‡§Ç‡§ó‡§æ‡•§"
    # ... (‡§¨‡§æ‡§ï‡•Ä ‡§ö‡•à‡§ü‡§¨‡•â‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï)
    else: return "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§Ø‡§π ‡§∏‡§µ‡§æ‡§≤ ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§"

# --- Main Application ---
def main():
    # --- Session State Initialization (‡§™‡§π‡§≤‡•á ‡§ú‡•à‡§∏‡§æ) ---
    st.session_state.setdefault('logged_in', False)
    st.session_state.setdefault('username', '')
    st.session_state.setdefault('language', None)
    st.session_state.setdefault('view', 'main_app')
    st.session_state.setdefault('font_size', 16)
    st.session_state.setdefault('disease_selected', None)
    st.session_state.setdefault('prediction_result', None)
    st.session_state.setdefault('messages', [])

    # --- Apply Custom CSS for Font Size (‡§™‡§π‡§≤‡•á ‡§ú‡•à‡§∏‡§æ) ---
    st.markdown(f"<style>.main {{ font-size: {st.session_state.font_size}px; }}</style>", unsafe_allow_html=True)

    # --- Login/Signup Page (‡§™‡§π‡§≤‡•á ‡§ú‡•à‡§∏‡§æ) ---
    if not st.session_state.logged_in:
        st.set_page_config(page_title="Welcome to CheckupTime", layout="centered")
        st.title("CheckupTime ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à / Welcome to CheckupTime")
        # ... (Login/Signup ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§ï‡•ã‡§° ‡§Ø‡§π‡§æ‡§Å)
        menu = ["‡§≤‡•â‡§ó‡§ø‡§® (Login)", "‡§∏‡§æ‡§á‡§® ‡§Ö‡§™ (Sign Up)"]
        choice = st.sidebar.selectbox("‡§Æ‡•á‡§®‡•Ç (Menu)", menu)
        if choice == "‡§≤‡•â‡§ó‡§ø‡§® (Login)":
            st.sidebar.subheader("Login Section")
            username = st.sidebar.text_input("‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ")
            password = st.sidebar.text_input("‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°", type='password')
            if st.sidebar.button("‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç"):
                create_usertable(); create_history_table()
                db_password_hash = get_user_password_hash(username)
                if db_password_hash and check_hashes(password, db_password_hash[0]):
                    st.session_state.logged_in = True
                    st.session_state.username = username
                    st.rerun()
                else:
                    st.warning("‡§ó‡§≤‡§§ ‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ ‡§Ø‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°")
        elif choice == "‡§∏‡§æ‡§á‡§® ‡§Ö‡§™ (Sign Up)":
            st.sidebar.subheader("‡§®‡§Ø‡§æ ‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç")
            new_user = st.sidebar.text_input("‡§®‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ")
            new_password = st.sidebar.text_input("‡§®‡§Ø‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°", type='password')
            if st.sidebar.button("‡§∏‡§æ‡§á‡§® ‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç"):
                create_usertable(); add_userdata(new_user, make_hashes(new_password))
                st.success("‡§ñ‡§æ‡§§‡§æ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§® ‡§ó‡§Ø‡§æ ‡§π‡•à!")
                st.info("‡§Ö‡§¨ ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§")

    # --- Main App Page ---
    else:
        st.set_page_config(page_title="CheckupTime Dashboard", layout="wide")
        is_hindi = st.session_state.language == "Hindi"

        # --- Sidebar Navigation and Settings ---
        st.sidebar.title(f"‡§®‡§Æ‡§∏‡•ç‡§§‡•á, {st.session_state.username}" if is_hindi else f"Hello, {st.session_state.username}")
        
        # Navigation Buttons
        if st.sidebar.button("‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ê‡§™" if is_hindi else "Main App", use_container_width=True): st.session_state.view = 'main_app'; st.rerun()
        if st.sidebar.button("‡§Æ‡•á‡§∞‡•Ä ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä" if is_hindi else "My History", use_container_width=True): st.session_state.view = 'history'; st.rerun()
        if st.sidebar.button("‡§ö‡•à‡§ü ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü" if is_hindi else "Chat Assistant", use_container_width=True): st.session_state.view = 'chatbot'; st.rerun()
        # --- (‡§®‡§Ø‡§æ) Doctor & Emergency Help Button ---
        if st.sidebar.button("‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§î‡§∞ ‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§π‡•á‡§≤‡•ç‡§™" if is_hindi else "Doctor & Emergency Help", use_container_width=True):
            st.session_state.view = 'emergency'
            st.rerun()
        if st.sidebar.button("‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§∏‡•Ä ‡§™‡•â‡§≤‡§ø‡§∏‡•Ä" if is_hindi else "Privacy Policy", use_container_width=True): st.session_state.view = 'privacy'; st.rerun()

        # Settings Section
        st.sidebar.divider()
        st.sidebar.header("‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏" if is_hindi else "Settings")
        st.sidebar.toggle("‡§°‡§æ‡§∞‡•ç‡§ï ‡§Æ‡•ã‡§°" if is_hindi else "Dark Mode", value=True)
        st.session_state.font_size = st.sidebar.slider("‡§´‡•â‡§®‡•ç‡§ü ‡§∏‡§æ‡§á‡§ú", 12, 24, st.session_state.font_size)
        
        st.sidebar.divider()
        if st.sidebar.button("‡§≤‡•â‡§ó‡§Ü‡§â‡§ü" if is_hindi else "Logout", use_container_width=True):
            for key in list(st.session_state.keys()): del st.session_state[key]
            st.rerun()

        # --- Main Content Area (View Controller) ---
        if st.session_state.view == 'emergency': # <-- (‡§®‡§Ø‡§æ) Emergency View
            st.title("‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§î‡§∞ ‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§ó‡§æ‡§á‡§°" if is_hindi else "Doctor Contact & Emergency Guide")
            
            # --- Doctor Contact Section ---
            st.header("‡§Ö‡§™‡§®‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç" if is_hindi else "Contact Doctors in Your Area")
            doctors_df = load_data('doctors_data.csv')
            if doctors_df is not None:
                city_list_hi = ["‡§∏‡§≠‡•Ä"] + doctors_df['city'].unique().tolist()
                city_list_en = ["All"] + doctors_df['city'].unique().tolist()
                
                selected_city = st.selectbox(
                    "‡§∂‡§π‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç" if is_hindi else "Select City",
                    city_list_hi if is_hindi else city_list_en
                )

                if selected_city == "‡§∏‡§≠‡•Ä" or selected_city == "All":
                    filtered_doctors = doctors_df
                else:
                    filtered_doctors = doctors_df[doctors_df['city'] == selected_city]
                
                for index, row in filtered_doctors.iterrows():
                    doc_name = row['doctor_name']
                    specialty = row['specialty_hi'] if is_hindi else row['specialty_en']
                    notes = row['notes_hi'] if is_hindi else row['notes_en']
                    with st.container(border=True):
                        st.subheader(f"{doc_name} - ({specialty})")
                        st.text(f"üìç {row['city']} | üìû {row['phone']}")
                        st.caption(notes)
            else:
                st.error("‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•ã‡§Ç ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ‡•§" if is_hindi else "Could not load doctors' data.")

            # --- Emergency Guide Section ---
            st.divider()
            st.header("‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä ‡§´‡§∞‡•ç‡§∏‡•ç‡§ü ‡§è‡§° ‡§ó‡§æ‡§á‡§°" if is_hindi else "Emergency First Aid Guide")
            
            # Heart Attack
            with st.expander("‚ù§Ô∏è ‡§π‡§æ‡§∞‡•ç‡§ü ‡§Ö‡§ü‡•à‡§ï (Heart Attack)"):
                st.markdown("""
                - **‡§§‡•Å‡§∞‡§Ç‡§§ ‡§è‡§Æ‡•ç‡§¨‡•Å‡§≤‡•á‡§Ç‡§∏ ‡§¨‡•Å‡§≤‡§æ‡§è‡§Ç‡•§**
                - ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§Ü‡§∞‡§æ‡§Æ ‡§∏‡•á ‡§¨‡§ø‡§†‡§æ‡§è‡§Ç, ‡§â‡§®‡§ï‡•á ‡§ï‡§™‡§°‡§º‡•á ‡§¢‡•Ä‡§≤‡•á ‡§ï‡§∞‡•á‡§Ç‡•§
                - ‡§Ö‡§ó‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§®‡•á ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§è‡§∏‡•ç‡§™‡§ø‡§∞‡§ø‡§® (Aspirin) ‡§≤‡•á‡§®‡•á ‡§ï‡•ã ‡§ï‡§π‡§æ ‡§π‡•à, ‡§§‡•ã ‡§¶‡•á‡§Ç‡•§
                - **CPR ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç** ‡§Ö‡§ó‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§¨‡•á‡§π‡•ã‡§∂ ‡§π‡•à ‡§î‡§∞ ‡§∏‡§æ‡§Ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§≤‡•á ‡§∞‡§π‡§æ ‡§π‡•à‡•§
                -
                - **Call an ambulance immediately.**
                - Make the person sit comfortably, loosen their clothing.
                - Give Aspirin if it has been prescribed by a doctor.
                - **Start CPR** if the person is unconscious and not breathing.
                """)
            
            # Burns
            with st.expander("üî• ‡§ú‡§≤‡§®‡§æ (Burns)"):
                st.markdown("""
                - ‡§ú‡§≤‡•á ‡§π‡•Å‡§è ‡§π‡§ø‡§∏‡•ç‡§∏‡•á ‡§ï‡•ã **10-15 ‡§Æ‡§ø‡§®‡§ü ‡§§‡§ï ‡§†‡§Ç‡§°‡•á ‡§¨‡§π‡§§‡•á ‡§™‡§æ‡§®‡•Ä** ‡§ï‡•á ‡§®‡•Ä‡§ö‡•á ‡§∞‡§ñ‡•á‡§Ç‡•§
                - ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§§‡§∞‡§π ‡§ï‡§æ ‡§§‡•á‡§≤, ‡§Æ‡§ï‡•ç‡§ñ‡§® ‡§Ø‡§æ ‡§ü‡•Ç‡§•‡§™‡•á‡§∏‡•ç‡§ü ‡§® ‡§≤‡§ó‡§æ‡§è‡§Ç‡•§
                - ‡§∏‡§æ‡§´, ‡§∏‡•Ç‡§ñ‡•á ‡§ï‡§™‡§°‡§º‡•á ‡§∏‡•á ‡§¢‡§ï‡•á‡§Ç‡•§
                - ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ú‡§≤‡§®‡•á ‡§™‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ú‡§æ‡§è‡§Ç‡•§
                -
                - Hold the burnt area under **cool running water for 10-15 minutes.**
                - Do not apply any oil, butter, or toothpaste.
                - Cover with a clean, dry cloth.
                - For severe burns, go to the doctor immediately.
                """)

        # --- Other Views (Chatbot, History, Privacy, Main App) ---
        elif st.session_state.view == 'chatbot':
            st.title("CheckupTime ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ü§ñ")
            # ... (Chatbot code from Part 6)
            
        elif st.session_state.view == 'history':
            st.title("‡§Æ‡•á‡§∞‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä")
            # ... (History view code from Part 6)
            
        elif st.session_state.view == 'privacy':
            st.title("‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§∏‡•Ä ‡§™‡•â‡§≤‡§ø‡§∏‡•Ä")
            # ... (Privacy view code)
            
        elif st.session_state.view == 'main_app':
            # ... (Main prediction app flow from Part 6)
            pass # The code is identical to Part 6, so it's omitted for brevity

if __name__ == '__main__':
    main()